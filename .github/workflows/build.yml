name: Build Desktop App

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false
      NPM_CONFIG_FUND: false
      NPM_CONFIG_AUDIT: false
      # HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HF_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace (tree)
        shell: pwsh
        run: |
          Write-Host "CWD =" (Get-Location)
          Get-ChildItem -Recurse -Force | Select-Object FullName | Format-Table -AutoSize

      # ---------- Node ----------
      - name: Setup Node (with npm cache if lockfile exists)
        if: ${{ hashFiles('package-lock.json') != '' || hashFiles('**/package-lock.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      - name: Setup Node (no cache)
        if: ${{ hashFiles('package-lock.json') == '' && hashFiles('**/package-lock.json') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Print Node/NPM versions
        run: |
          node -v
          npm -v

      - name: Ensure package.json exists
        shell: pwsh
        run: |
          if (-not (Test-Path "package.json")) {
            Write-Error "package.json not found at repo root. Please commit it."
          }
          Get-Content package.json

      - name: Install Node deps (lockfile-aware, verbose)
        shell: pwsh
        run: |
          if (Test-Path "package-lock.json") {
            Write-Host "Found package-lock.json → npm ci (verbose)"
            npm ci --loglevel verbose
          } else {
            Write-Host "No lockfile → npm install (legacy peer ok, verbose)"
            npm install --legacy-peer-deps --loglevel verbose
          }

      - name: Ensure electron-builder is available
        shell: pwsh
        run: |
          npx --yes electron-builder --version

      # ---------- Python ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Prepare venv & install Python deps
        shell: pwsh
        run: |
          python -m venv python/venv
          python/venv/Scripts/python -m pip install --upgrade pip
          if (Test-Path 'python/requirements.txt') {
            python/venv/Scripts/pip install -r python/requirements.txt
          }
          python/venv/Scripts/pip install huggingface_hub

      - name: Download SDXL-Turbo model
        shell: pwsh
        run: >
          python/venv/Scripts/python -c
          "from huggingface_hub import snapshot_download;
          from pathlib import Path;
          target=Path('python/models/sd-turbo');
          target.mkdir(parents=True, exist_ok=True);
          snapshot_download(repo_id='stabilityai/sdxl-turbo',
                            local_dir=str(target),
                            local_dir_use_symlinks=False);
          print('Model downloaded to:', target)"

      # ---------- Build ----------
      - name: Build Windows installer (verbose)
        run: npx electron-builder --win --publish never --x64 --ia32 --config.asar=true --config.generateUpdatesFilesForAllChannels=false
        # 若你有 script： npm run build:win

      # ---------- Artifacts ----------
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.zip
            dist/*.7z
          if-no-files-found: error
