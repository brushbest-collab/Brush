name: Build Desktop App (auto-detect app dir)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false
      NPM_CONFIG_FUND: false
      NPM_CONFIG_AUDIT: false
      # HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HF_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs folder
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path logs | Out-Null

      # === 1) 自動尋找含有 package.json 的專案資料夾 ===
      - name: Locate app directory (where package.json lives)
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path . -Filter package.json -Recurse -File -Depth 6 `
                 | Where-Object { $_.FullName -notmatch '\\node_modules\\' } `
                 | Select-Object -First 1
          if (-not $pkg) { throw "package.json not found anywhere in the repo." }
          $dir = $pkg.DirectoryName
          "APP_DIR=$dir" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "APP_DIR = $dir"

      - name: Show workspace tree
        shell: pwsh
        run: |
          "CWD = $(Get-Location)" | Tee-Object -FilePath logs/00-cwd.txt
          Get-ChildItem -Recurse -Force | Select-Object FullName, Length |
            Format-Table -AutoSize | Out-String | Tee-Object -FilePath logs/01-tree.txt
          "APP_DIR = $env:APP_DIR" | Tee-Object -FilePath logs/01a-appdir.txt

      # === 2) Node ===
      - name: Setup Node (no cache to avoid lockfile issues)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Print Node/NPM versions
        run: |
          node -v | Tee-Object -FilePath logs/02-node.txt
          npm -v  | Tee-Object -FilePath logs/03-npm.txt -Append

      - name: Ensure package.json exists in APP_DIR
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (-not (Test-Path "package.json")) { throw "package.json not found in APP_DIR ($env:APP_DIR)" }
          Get-Content package.json | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/04-package.json.txt

      - name: Install Node deps (lockfile-aware, verbose)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (Test-Path "package-lock.json") {
            Write-Host "Found package-lock.json → npm ci"
            npm ci --loglevel verbose *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/05-npm-install.log
          } else {
            Write-Host "No lockfile → npm install"
            npm install --legacy-peer-deps --loglevel verbose *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/05-npm-install.log
          }

      - name: Ensure electron-builder available
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          npx --yes electron-builder --version *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/06-electron-builder-version.txt

      # === 3) Python (在 APP_DIR 內建立 venv 與模型資料夾) ===
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Prepare venv & install Python deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          python -m venv python/venv
          python/venv/Scripts/python -m pip install --upgrade pip *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/07-pip-upgrade.log
          if (Test-Path 'python/requirements.txt') {
            python/venv/Scripts/pip install -r python/requirements.txt *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/08-pip-req.log
          }
          python/venv/Scripts/pip install huggingface_hub *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/09-pip-hf.log

      - name: Download SDXL-Turbo model
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: >
          python/venv/Scripts/python -c
          "from huggingface_hub import snapshot_download;
          from pathlib import Path;
          target=Path('python/models/sd-turbo'); target.mkdir(parents=True, exist_ok=True);
          snapshot_download(repo_id='stabilityai/sdxl-turbo', local_dir=str(target), local_dir_use_symlinks=False);
          print('Model downloaded to:', target)" *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/10-model-download.log

      # === 4) Build ===
      - name: Build Windows installer (verbose)
        working-directory: ${{ env.APP_DIR }}
        run: >
          npx electron-builder --win --publish never --x64
          --config.asar=true --config.generateUpdatesFilesForAllChannels=false
          *>&1 | tee $env:GITHUB_WORKSPACE/logs/11-electron-builder.log

      # === 5) Upload logs & artifacts ===
      - name: Upload CI logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: logs/**
          if-no-files-found: warn

      - name: Upload installer (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: |
            ${{ env.APP_DIR }}/dist/*.exe
            ${{ env.APP_DIR }}/dist/*.msi
            ${{ env.APP_DIR }}/dist/*.zip
            ${{ env.APP_DIR }}/dist/*.7z
          if-no-files-found: warn
