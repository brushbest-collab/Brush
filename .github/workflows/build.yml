name: Build Desktop App (portable-python, first-run venv)

on:
  workflow_dispatch:
    inputs:
      include_model:
        description: "Bundle SDXL-Turbo model (true/false)"
        required: false
        default: "true"
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path logs | Out-Null

      - name: Locate app dir
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Filter package.json -Recurse -File -Depth 6 | Where-Object { $_.FullName -notmatch '\\node_modules\\' } | Select-Object -First 1
          if (-not $pkg) { throw "package.json not found" }
          "APP_DIR=$($pkg.DirectoryName)" | Out-File -Append -FilePath $env:GITHUB_ENV
          Write-Host "APP_DIR=$($pkg.DirectoryName)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Patch package.json build
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          $pkg.build = @{
            appId       = "com.evi.brush.desktop";
            productName = "EVI Brush Desktop";
            directories = @{ output = "dist" };
            files = @("**/*","!logs/**","!.github/**","!**/*.log","!**/*.md","!node_modules/*/.cache/**");
            extraResources = @(@{from="python"; to="python"; filter=@("**/*")});
            asar = $false;
            win  = @{ icon="build/icon.ico"; target=@("nsis") };
            nsis = @{
              oneClick=$true; perMachine=$false;
              allowToChangeInstallationDirectory=$false;
              createDesktopShortcut=$true; createStartMenuShortcut=$true;
              shortcutName="EVI Brush Desktop"; runAfterFinish=$true
            };
            publish=@(@{provider="github"})
          }
          ($pkg|ConvertTo-Json -Depth 100)|Set-Content package.json -Encoding UTF8

      # 下載可攜 Python（PBS）到 python/pbs
      - name: Bundle portable Python (PBS)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $url = "https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.10.14+20240713-x86_64-pc-windows-msvc-shared-pgo-full.zip"
          $zip = "pbs.zip"
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "python\pbs-extract" -Force
          $py = Get-ChildItem "python\pbs-extract" -Recurse -Filter python.exe | Select-Object -First 1
          if (-not $py) { throw "pbs python.exe not found" }
          New-Item -ItemType Directory -Force -Path "python\pbs" | Out-Null
          Copy-Item $py.Directory.FullName\* -Destination "python\pbs" -Recurse -Force
          Remove-Item $zip -Force
          Write-Host "PBS ready."

      # 用 CI 的 Python 3.10 預先把 requirements 做成 wheels（離線可用）
      - name: Setup Python (for wheels/model only)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build wheels for offline install
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $req = if (Test-Path "python/requirements.txt") { "python/requirements.txt" } elseif (Test-Path "python/requirements") { "python/requirements" } else { "" }
          if ($req -ne "") {
            python -m pip install --upgrade pip wheel
            python -m pip wheel -r $req -w python/wheels
          } else {
            Write-Host "No requirements file — skip wheels."
          }

      # 是否要把模型打包進去
      - name: Decide include model
        id: model
        shell: pwsh
        run: |
          $v = "${{ github.event.inputs.include_model }}"
          if ($v -eq "") { $v = "true" }
          "INCLUDE_MODEL=$v" | Out-File -Append -FilePath $env:GITHUB_ENV
          Write-Host "INCLUDE_MODEL=$v"

      - name: Download SDXL-Turbo model (into python/models)
        if: env.INCLUDE_MODEL == 'true'
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          python -m pip install huggingface_hub hf_transfer
          $env:HF_HUB_ENABLE_HF_TRANSFER="1"
          python - << 'PY'
from huggingface_hub import snapshot_download
from pathlib import Path
target = Path('python/models/sd-turbo'); target.mkdir(parents=True, exist_ok=True)
snapshot_download(repo_id='stabilityai/sdxl-turbo', local_dir=str(target), local_dir_use_symlinks=False)
print('model at', target)
PY

      - name: Build (succeed if artifacts exist)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $env:DEBUG="electron-builder"
          npx electron-builder --win --x64 --publish never *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/eb.log
          $has = Get-ChildItem dist -Include *.exe,*.msi,*.zip,*.7z -Recurse -ErrorAction SilentlyContinue
          if (-not $has) { throw "No installers produced." }

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: ${{ env.APP_DIR }}/dist/*

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: logs/**
