name: Release (Win, publish to GitHub)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.2.3) — 留空則不建立 tag'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  release-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v4

      - name: Create logs dir
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\logs" | Out-Null

      - name: Locate app dir
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter package.json -Recurse -Depth 6 -File |
            Where-Object { $_.FullName -notmatch '\\node_modules\\' } | Select-Object -First 1
          if (-not $pkg) { throw "package.json not found" }
          "APP_DIR=$($pkg.DirectoryName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "APP_DIR = $($pkg.DirectoryName)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Node deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (Test-Path "package-lock.json") { npm ci --loglevel verbose } else { npm install --legacy-peer-deps --loglevel verbose }
          npx --yes electron-builder --version | Tee-Object -FilePath "$env:GITHUB_WORKSPACE\logs\eb-version.txt"

      - name: Patch package.json (minimal safe build config)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          if (-not $pkg.build) { $pkg | Add-Member -NotePropertyName build -NotePropertyValue (@{}) }
          $b = $pkg.build
          $b.productName = "EVI Brush Desktop"
          $b.appId       = "com.evi.brush.desktop"
          $b.files       = @("**/*","!python/venv/**")
          $b.extraResources = @(@{ from = "python/models"; to = "resources/python/models"; filter = @("**/*") })
          $b.asar        = $true
          $b.asarUnpack  = @("python/**")
          if (-not $b.win) { $b | Add-Member -NotePropertyName win -NotePropertyValue (@{}) }
          $b.win.icon    = "build/icon.ico"
          $b.win.target  = @("nsis")
          $pkg.publish   = @(@{ provider = "github" })
          ($pkg | ConvertTo-Json -Depth 100) | Set-Content -Encoding UTF8 package.json

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create venv, deps & download model
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pyRoot = Join-Path $env:APP_DIR 'resources/python'
          New-Item -ItemType Directory -Force -Path $pyRoot | Out-Null
          python -m venv (Join-Path $pyRoot 'venv')
          $venvPy = Join-Path $pyRoot 'venv\Scripts\python.exe'
          & $venvPy -m pip install --upgrade pip
          if (Test-Path 'python/requirements.txt') { & $venvPy -m pip install -r 'python/requirements.txt' }
          & $venvPy -m pip install huggingface_hub hf_transfer
          $code = @'
from huggingface_hub import snapshot_download
from pathlib import Path
p = Path("python/models/sd-turbo")
p.mkdir(parents=True, exist_ok=True)
snapshot_download(repo_id="stabilityai/sdxl-turbo", local_dir=str(p), local_dir_use_symlinks=False)
print("Model saved to:", p)
'@
          $script = Join-Path $env:RUNNER_TEMP 'dl_model.py'
          $code | Set-Content -Path $script -Encoding UTF8
          & $venvPy $script *>&1 | Tee-Object -FilePath "$env:GITHUB_WORKSPACE\logs\model-download.txt"

      - name: (Optional) create tag
        if: ${{ inputs.tag != '' }}
        shell: pwsh
        run: |
          git tag "${{ inputs.tag }}"
          git push origin "${{ inputs.tag }}"

      - name: Build & publish with electron-builder
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $env:DEBUG="electron-builder"
          npx electron-builder --win --x64 --publish always *>&1 | Tee-Object -FilePath "$env:GITHUB_WORKSPACE\logs\electron-builder.txt"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-logs
          path: logs\**
          if-no-files-found: warn
