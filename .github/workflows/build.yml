name: Build Desktop App (debuggable)

on:
  workflow_dispatch:
    inputs:
      include_model:
        description: "Bundle SDXL-Turbo model (slower, big)"
        required: false
        default: "false"
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 45
    concurrency:
      group: build-${{ github.ref }}
      cancel-in-progress: true
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false
      NPM_CONFIG_FUND: false
      NPM_CONFIG_AUDIT: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs folder
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path logs | Out-Null

      - name: Locate app directory (where package.json lives)
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path . -Filter package.json -Recurse -File -Depth 6 `
                 | Where-Object { $_.FullName -notmatch '\\node_modules\\' } `
                 | Select-Object -First 1
          if (-not $pkg) { throw "package.json not found anywhere in the repo." }
          "APP_DIR=$($pkg.DirectoryName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "APP_DIR = $($pkg.DirectoryName)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Ensure package.json exists in APP_DIR
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (-not (Test-Path "package.json")) { throw "package.json not found in APP_DIR ($env:APP_DIR)" }
          Get-Content package.json | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/04-package.before.txt

      # —— 最小且可偵錯的 build 設定（asar: false）——
      - name: Overwrite package.json build config (no asar for debug)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          $pkg.build = @{
            appId           = "com.evi.brush.desktop";
            productName     = "EVI Brush Desktop";
            directories     = @{ output = "dist" };
            files           = @("**/*","!python/venv/**","!python/models/**","!logs/**","!.github/**","!**/*.log","!**/*.md");
            extraResources  = @(@{ from="python/models"; to="resources/python/models"; filter=@("**/*") });
            asar            = $false;   # ← 關閉 asar，安裝後可直接看到 resources/app/*.js
            win             = @{ icon="build/icon.ico"; target=@("nsis") };
            nsis            = @{
              oneClick                          = $true;
              perMachine                        = $false;
              allowToChangeInstallationDirectory= $false;
              createDesktopShortcut             = $true;
              createStartMenuShortcut           = $true;
              shortcutName                      = "EVI Brush Desktop";
              runAfterFinish                    = $true;
              uninstallDisplayName              = "EVI Brush Desktop";
            };
            publish         = @(@{ provider = "github" });
          }
          ($pkg | ConvertTo-Json -Depth 100) | Set-Content package.json -Encoding UTF8
          Get-Content package.json | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/04-package.after.txt | Out-Null

      - name: Install Node deps (lockfile-aware, verbose)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (Test-Path "package-lock.json") { npm ci --loglevel verbose } else { npm install --legacy-peer-deps --loglevel verbose }

      - name: Ensure electron-builder available
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: npx --yes electron-builder --version

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Prepare venv & install Python deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          python -m venv python/venv
          python/venv/Scripts/python -m pip install --upgrade pip
          if (Test-Path 'python/requirements.txt') { python/venv/Scripts/pip install -r python/requirements.txt }
          python/venv/Scripts/pip install huggingface_hub

      - name: Decide include model
        id: model
        shell: pwsh
        run: |
          $manual = "${{ github.event.inputs.include_model }}"
          $include = ($manual -eq "true")
          "INCLUDE_MODEL=$include" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "INCLUDE_MODEL = $include"

      - name: Cache SDXL-Turbo
        if: env.INCLUDE_MODEL == 'True'
        uses: actions/cache@v4
        with:
          path: ${{ env.APP_DIR }}/python/models/sd-turbo
          key: sdxl-turbo-v1

      - name: Download SDXL-Turbo model
        if: env.INCLUDE_MODEL == 'True'
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: >
          python/venv/Scripts/python -c
          "from huggingface_hub import snapshot_download;
          from pathlib import Path;
          target=Path('python/models/sd-turbo'); target.mkdir(parents=True, exist_ok=True);
          snapshot_download(repo_id='stabilityai/sdxl-turbo', local_dir=str(target), local_dir_use_symlinks=False)"

      # 先做一次 main.js 語法檢查（會先失敗，避免把壞檔打包）
      - name: Syntax-check main.js
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (-not (Test-Path "main.js")) { throw "main.js not found in APP_DIR" }
          node -e "require('vm').runInNewContext(require('fs').readFileSync('main.js','utf8'))"

      - name: Put icon under APP_DIR/build (required by electron-builder)
        shell: pwsh
        run: |
          $src = Join-Path $env:GITHUB_WORKSPACE 'build/icon.ico'
          $dstDir = Join-Path $env:APP_DIR 'build'
          $dst = Join-Path $dstDir 'icon.ico'
          if (Test-Path $src) { New-Item -ItemType Directory -Force -Path $dstDir | Out-Null; Copy-Item $src $dst -Force }

      - name: Build Windows installer (verbose; succeed if artifacts exist)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $env:DEBUG = "electron-builder"
          npx electron-builder --win --publish never --x64 *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/11-electron-builder.log
          $code = $LASTEXITCODE
          $has = Get-ChildItem dist -Include *.exe,*.msi,*.zip,*.7z -Recurse -ErrorAction SilentlyContinue
          if ($code -ne 0) {
            if ($has) { Write-Warning "builder returned $code but installers exist → continue."; exit 0 }
            else { Write-Error "builder failed with $code and no installers were produced."; exit $code }
          }

      - name: Upload CI logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: logs/**
          if-no-files-found: warn

      - name: Upload installer (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: |
            ${{ env.APP_DIR }}/dist/*.exe
            ${{ env.APP_DIR }}/dist/*.msi
            ${{ env.APP_DIR }}/dist/*.zip
            ${{ env.APP_DIR }}/dist/*.7z
          if-no-files-found: warn

      # 另外把未壓縮的 app 與 app.asar/win-unpacked 一起傳上來，方便檢查
      - name: Upload win-unpacked
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: win-unpacked
          path: ${{ env.APP_DIR }}/dist/win-unpacked/**
          if-no-files-found: warn

      - name: Upload app folder (debug, since asar=false)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-folder
          path: ${{ env.APP_DIR }}/dist/win-unpacked/resources/app/**
          if-no-files-found: warn
