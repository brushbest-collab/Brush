name: Build Desktop App (PBS + model)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 180

    env:
      NPM_CONFIG_FUND: "false"
      NPM_CONFIG_AUDIT: "false"

    steps:
      # 0) 取得原始碼 + 建立 logs 夾
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create logs dir
        shell: pwsh
        run: New-Item -Type Directory -Force -Path logs | Out-Null

      # 1) 找出含 package.json 的應用資料夾（忽略 node_modules）
      - name: Locate app dir (package.json)
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path . -Filter package.json -Recurse -File -Depth 6 `
                 | Where-Object { $_.FullName -notmatch '\\node_modules\\' } `
                 | Select-Object -First 1
          if (-not $pkg) { throw "package.json not found anywhere in the repo." }
          $dir = $pkg.DirectoryName
          "APP_DIR=$dir" | Out-File -FilePath $env:GITHUB_ENV -Append
          "APP_DIR: $dir"

      - name: Show tree
        shell: pwsh
        run: |
          "CWD = $(Get-Location)" | Tee-Object -FilePath logs/00-cwd.txt
          "APP_DIR = $env:APP_DIR" | Tee-Object -FilePath logs/00-appdir.txt
          Get-ChildItem -Recurse -Force | Select-Object FullName,Length |
            Format-Table -AutoSize | Out-String | Tee-Object -FilePath logs/01-tree.txt

      # 2) Node & 依賴
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Node/NPM versions
        run: |
          node -v | Tee-Object -FilePath logs/02-node.txt
          npm -v  | Tee-Object -FilePath logs/03-npm.txt -Append

      - name: Install Node deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (Test-Path "package-lock.json") {
            npm ci --loglevel verbose *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/04-npm-install.log
          } else {
            npm install --legacy-peer-deps --loglevel verbose *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/04-npm-install.log
          }

      - name: Ensure electron-builder available
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          npx --yes electron-builder --version `
            *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/05-electron-builder.txt

      # 3) 建立可攜式 venv（打包到 resources/python/venv）
      - name: Setup Python (build-time)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create venv & install python deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pyRoot = Join-Path $env:APP_DIR 'resources/python'
          New-Item -ItemType Directory -Force -Path $pyRoot | Out-Null

          python -m venv (Join-Path $pyRoot 'venv')
          $venvPy = Join-Path $pyRoot 'venv/Scripts/python.exe'

          & $venvPy -m pip install --upgrade pip wheel `
            *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/06-pip-upgrade.log

          if (Test-Path 'python/requirements.txt') {
            & $venvPy -m pip install -r python/requirements.txt `
              *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/07-pip-req.log
          }

          # 需要下載模型的最小套件
          & $venvPy -m pip install huggingface_hub hf_transfer `
            *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/08-pip-hf.log

      # 4) 下載模型到 repo 的 python/models（稍後用 extraResources 打包進去）
      - name: Download SDXL-turbo model
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $venvPy = Join-Path $env:APP_DIR 'resources/python/venv/Scripts/python.exe'
          & $venvPy -c "
import os
from pathlib import Path
from huggingface_hub import snapshot_download
os.environ['HF_HUB_ENABLE_HF_TRANSFER'] = '1'
target = Path('python/models/sd-turbo'); target.mkdir(parents=True, exist_ok=True)
snapshot_download(repo_id='stabilityai/sdxl-turbo', local_dir=str(target), local_dir_use_symlinks=False)
print('Model downloaded to', target)
" *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/09-model.log

      # 5) 修補 package.json：確保 asar、asarUnpack、extraResources、dist、nsis
      - name: Patch package.json for build
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          function Ensure-Prop { param($obj,$name,$default)
            if (-not ($obj.PSObject.Properties.Name -contains $name)) {
              $obj | Add-Member -NotePropertyName $name -NotePropertyValue $default
            }
          }

          $pkg = Get-Content package.json -Raw | ConvertFrom-Json

          Ensure-Prop $pkg 'build' @{}
          $b = $pkg.build

          Ensure-Prop $b 'directories' @{}
          $b.directories.output = 'dist'

          # 盡量避免把 venv 與 models 放進 asar
          $b.files = @('**/*','!python/venv/**','!python/models/**')

          $b.asar = $true
          $b.asarUnpack = @('python/**')

          # 把模型複製到 resources/python/models
          $b.extraResources = @(@{
              from = 'python/models'
              to   = 'resources/python/models'
              filter = @('**/*')
          })

          Ensure-Prop $b 'win' @{}
          $b.win.icon   = 'build/icon.ico'
          $b.win.target = @('nsis')

          Ensure-Prop $b 'nsis' @{}
          $b.nsis.oneClick = $false
          $b.nsis.perMachine = $false
          $b.nsis.allowToChangeInstallationDirectory = $true
          $b.nsis.createDesktopShortcut = 'always'
          $b.nsis.shortcutName = 'EVI Brush Desktop'
          $b.nsis.uninstallDisplayName = 'EVI Brush Desktop'

          ($pkg | ConvertTo-Json -Depth 100) | Set-Content -Path package.json -Encoding UTF8
          Get-Content package.json | Out-File $env:GITHUB_WORKSPACE/logs/10-package.after.json -Encoding UTF8

      # 6) 編譯（有產物就當成功）
      - name: Build with electron-builder
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $env:DEBUG = 'electron-builder'
          npx electron-builder --win --x64 --publish never `
            *>&1 | Tee-Object -FilePath $env:GITHUB_WORKSPACE/logs/11-eb.log

      - name: Fail if no installers produced
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $has = Get-ChildItem -Path 'dist' -Recurse -Include *.exe,*.msi,*.zip,*.7z -ErrorAction SilentlyContinue
          if (-not $has) {
            Write-Error 'No installers produced.'
          } else {
            "Installers: $($has.Count)"
            $has | Select-Object FullName | Format-Table -AutoSize | Out-String
          }

      # 7) 上傳產物 & 紀錄
      - name: Upload installers
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: ${{ env.APP_DIR }}/dist/**
          if-no-files-found: warn

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: logs/**
          if-no-files-found: warn
