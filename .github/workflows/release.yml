name: Release (Win, auto publish)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag（例如 v1.2.3；留空則用自動產生）"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  release-windows:
    runs-on: windows-latest
    timeout-minutes: 180
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # electron-builder 發版要用
      NPM_CONFIG_FUND: "false"
      NPM_CONFIG_AUDIT: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate app directory (package.json)
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path . -Filter package.json -Recurse -File -Depth 6 |
                 Where-Object { $_.FullName -notmatch '\\node_modules\\' } |
                 Select-Object -First 1
          if (-not $pkg) { throw "package.json not found" }
          "APP_DIR=$($pkg.DirectoryName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "APP_DIR = $($pkg.DirectoryName)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Patch package.json (icon & build)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          function Ensure-Prop { param($obj,$name,$default)
            if (-not ($obj.PSObject.Properties.Name -contains $name)) {
              $obj | Add-Member -NotePropertyName $name -NotePropertyValue $default
            }
          }
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          Ensure-Prop -obj $pkg -name 'build' -default (@{})
          $b = $pkg.build
          Ensure-Prop -obj $b -name 'directories' -default (@{})
          $b.directories.output = "dist"
          $b.files = @("**/*", "!python/venv/**", "!python/models/**")
          $b.extraResources = @(@{ from="python/models"; to="resources/python/models"; filter=@("**/*") })
          $b.asar = $true
          $b.asarUnpack = @("python/**")
          Ensure-Prop -obj $b -name 'win' -default (@{})
          $b.win.target = @("nsis")
          $b.win.icon   = "build/icon.ico"
          Ensure-Prop -obj $b -name 'nsis' -default (@{})
          $b.nsis.oneClick = $true
          $b.nsis.createDesktopShortcut = $true
          $b.nsis.shortcutName = "EVI Brush Desktop"
          Ensure-Prop -obj $b -name 'appId' -default 'com.evi.brush.desktop'
          ($pkg | ConvertTo-Json -Depth 100) | Set-Content -Path package.json -Encoding UTF8

      - name: Install Node deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          if (Test-Path package-lock.json) { npm ci } else { npm i --legacy-peer-deps }
          npx --yes electron-builder --version

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create venv & deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pyRoot = Join-Path $env:APP_DIR 'resources/python'
          New-Item -ItemType Directory -Force -Path $pyRoot | Out-Null
          python -m venv (Join-Path $pyRoot 'venv')
          $venvPy = Join-Path $pyRoot 'venv/Scripts/python.exe'
          & $venvPy -m pip install --upgrade pip wheel
          if (Test-Path 'python/requirements.txt') {
            & $venvPy -m pip install -r python/requirements.txt
          }
          & $venvPy -m pip install huggingface_hub hf_transfer

      - name: Download SDXL-Turbo model
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        env:
          HF_HUB_ENABLE_HF_TRANSFER: "1"
        run: |
          $venvPy = Join-Path $env:APP_DIR 'resources/python/venv/Scripts/python.exe'
          $code = @'
from pathlib import Path
from huggingface_hub import snapshot_download
p = Path("python/models/sd-turbo"); p.mkdir(parents=True, exist_ok=True)
snapshot_download(repo_id="stabilityai/sdxl-turbo", local_dir=str(p), local_dir_use_symlinks=False)
print("Model saved to:", p)
'@
          $tmp = Join-Path $env:RUNNER_TEMP 'download_model.py'
          Set-Content -Path $tmp -Value $code -Encoding UTF8
          & $venvPy $tmp *>&1 | Tee-Object -FilePath "$env:GITHUB_WORKSPACE/model-download.txt"

      - name: (Optional) Create tag
        if: ${{ inputs.tag != '' }}
        shell: pwsh
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git tag $env:TAG
          git push origin $env:TAG
        env:
          TAG: ${{ inputs.tag }}

      - name: Build & publish (GitHub Releases)
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $env:DEBUG = "electron-builder*"
          npx electron-builder --win --x64 --publish always *>&1 |
            Tee-Object -FilePath "$env:GITHUB_WORKSPACE/eb.log"

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: release-logs
          path: |
            eb.log
            model-download.txt
