name: Release (Win + model, GitHub Releases)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (例如 v1.2.3；留空則不建立 tag、僅上傳 release draft)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  release-windows:
    runs-on: windows-latest
    timeout-minutes: 180
    env:
      EB_LOG: ${{ github.workspace }}\eb.log

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate app (find package.json)
        id: locate
        shell: pwsh
        run: |
          $pkg = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter package.json -File |
            Where-Object { $_.FullName -notmatch '\\node_modules\\' } |
            Select-Object -First 1
          if ($pkg) {
            "APP_DIR=$($pkg.DirectoryName)" | Out-File -FilePath $env:GITHUB_ENV -Append
            "HAS_NODE_APP=true"          | Out-File -FilePath $env:GITHUB_ENV -Append
            if (Test-Path (Join-Path $pkg.DirectoryName 'package-lock.json')) { "HAS_LOCK=true"  | Out-File -FilePath $env:GITHUB_ENV -Append }
            else                                                             { "HAS_LOCK=false" | Out-File -FilePath $env:GITHUB_ENV -Append }
            Write-Host "App dir = $($pkg.DirectoryName)"
          } else {
            "HAS_NODE_APP=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            "APP_DIR=$env:GITHUB_WORKSPACE" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Warning "No package.json found. Node build steps will be skipped."
          }

      - name: Setup Node.js 20
        if: env.HAS_NODE_APP == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Node dependencies
        if: env.HAS_NODE_APP == 'true'
        working-directory: ${{ env.APP_DIR }}
        shell: pwsh
        run: |
          if (Test-Path 'package-lock.json') { npm ci } else { npm i }

      - name: Create venv & Python deps
        shell: pwsh
        working-directory: ${{ env.APP_DIR }}
        run: |
          $pyRoot = Join-Path $env.APP_DIR 'resources\python'
          New-Item -ItemType Directory -Force -Path $pyRoot | Out-Null
          python -m venv (Join-Path $pyRoot 'venv')
          $venvPy = Join-Path $pyRoot 'venv\Scripts\python.exe'
          & $venvPy -m pip install --upgrade pip wheel
          if (Test-Path (Join-Path $pyRoot 'requirements.txt')) {
            & $venvPy -m pip install -r (Join-Path $pyRoot 'requirements.txt')
          } else {
            & $venvPy -m pip install huggingface_hub hf_transfer
          }
          "VENV_PY=$venvPy" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Download SDXL-Turbo model -> resources/python/models/sd-turbo
        shell: pwsh
        env:
          HF_HUB_ENABLE_HF_TRANSFER: "1"
        working-directory: ${{ env.APP_DIR }}
        run: |
          & $env:VENV_PY -c "from huggingface_hub import snapshot_download; import pathlib; p = pathlib.Path(r'resources/python/models/sd-turbo'); p.mkdir(parents=True, exist_ok=True); snapshot_download(repo_id='stabilityai/sdxl-turbo', local_dir=str(p), local_dir_use_symlinks=False)"
          Write-Host "Model downloaded."

      - name: Build & publish to GitHub Releases
        if: env.HAS_NODE_APP == 'true'
        working-directory: ${{ env.APP_DIR }}
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'continue'
          $args = @('--win','--x64','--publish','onTagOrDraft')
          if ('${{ inputs.tag }}' -ne '') {
            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
            git tag "${{ inputs.tag }}"
            git push origin "${{ inputs.tag }}"
            $args = @('--win','--x64','--publish','always')
          }
          npx electron-builder @args *>&1 | Tee-Object -FilePath $env:EB_LOG
          if (Test-Path '.\dist') { Write-Host "dist exists." } else { Write-Warning "No installers produced." }

      - name: Upload installers
        if: env.HAS_NODE_APP == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: ${{ env.APP_DIR }}\dist\**

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ${{ env.EB_LOG }}
          if-no-files-found: warn
