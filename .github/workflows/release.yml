name: Release (App + Model, split)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Node deps (skip if no package.json)
        if: ${{ hashFiles('package.json') != '' }}
        shell: pwsh
        run: |
          if (Test-Path package-lock.json) { npm ci } else { npm i }

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 僅建立 python/pbs 與模型資料夾(空)，不把模型打進 App
      - name: Ensure python/pbs & model folders (safe)
        shell: pwsh
        run: |
          $root   = (Get-Location).Path
          $pyDir  = Join-Path $root 'python'
          $pbsDir = Join-Path $pyDir  'pbs'
          $mdlDir = Join-Path $pyDir  'models\sd-turbo'
          foreach ($d in @($pyDir,$pbsDir,$mdlDir)) {
            if (Test-Path $d) {
              $it = Get-Item $d -ErrorAction SilentlyContinue
              if ($it -and -not $it.PSIsContainer) { Remove-Item $d -Force }
            }
            New-Item -ItemType Directory -Path $d -Force | Out-Null
          }
          Set-Content -LiteralPath (Join-Path $pbsDir 'ok') -Value 'ok' -Encoding ascii -Force

      # 只出程式（nsis/portable/zip），不含模型
      - name: Build App (nsis + portable + zip)
        if: ${{ hashFiles('package.json') != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx electron-builder --win nsis portable zip --publish never

      - name: Compute tag
        id: ver
        shell: pwsh
        run: echo "tag=v${{ github.run_number }}" >> $env:GITHUB_OUTPUT

      - name: Create/Update Release (App assets)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: ${{ steps.ver.outputs.tag }}
          body: |
            App (portable/zip/nsis). Model is provided separately as split volumes.
          files: |
            dist/*-x64.portable.exe
            dist/*-x64.zip
            dist/*-x64.nsis.exe
          fail_on_unmatched_files: true

      # 下載模型並分卷
      - name: Install deps for model download
        shell: pwsh
        run: |
          python -m pip install -U pip
          python -m pip install "huggingface_hub>=0.22.0" hf_transfer

      - name: Download SDXL-Turbo model
        shell: pwsh
        env:
          HF_ENDPOINT: https://huggingface.co
        run: |
          $target = Join-Path (Get-Location).Path 'python\models\sd-turbo'
          $code = @'
          from huggingface_hub import snapshot_download
          import os
          tgt = os.environ.get("TARGET_DIR")
          snapshot_download(
              repo_id="stabilityai/sdxl-turbo",
              local_dir=tgt,
              local_dir_use_symlinks=False
          )
          print("Saved to", tgt)
          '@
          Set-Content -Path download_model.py -Value $code -Encoding UTF8
          $env:TARGET_DIR = $target
          python download_model.py

      - name: Pack model into 7z (split 1900MB parts)
        shell: pwsh
        run: |
          $sevenZip = "${env:ProgramFiles}\7-Zip\7z.exe"
          if (-not (Test-Path $sevenZip)) { throw "7-Zip not found at $sevenZip" }
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          & "$sevenZip" a -t7z -m0=lzma2 -mx=3 -v1900m "dist\sdxl-turbo.7z" "python\models\sd-turbo\*" | Out-Null
          Get-ChildItem dist -Filter "sdxl-turbo.7z.*" | ForEach-Object { Write-Host "Created $($_.Name) ($([math]::Round($_.Length/1MB)) MB)" }

      - name: Upload model pack parts to the same Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: ${{ steps.ver.outputs.tag }}
          files: dist/sdxl-turbo.7z.*
          fail_on_unmatched_files: true
